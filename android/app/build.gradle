def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.ipfs"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 29
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.google.protobuf:protoc:3.21.2'

    implementation 'com.android.support:multidex:1.0.3'

    // Android (LICENSE done)
//    implementation 'androidx.work:work-runtime:2.8.0-alpha02'
//
//    // Android (LICENSE done)
//    implementation 'androidx.window:window:1.1.0-alpha02'
//
//    // Android (LICENSE done)
//    implementation 'com.google.android.material:material:1.7.0-alpha03'
//
//    // Android (LICENSE done)
//    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
//
//    // API (LICENSE done)
//    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
//
//    // API (LICENSE done)
//    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
//
//    // API (LICENSE done)
//    implementation 'androidx.room:room-runtime:2.5.0-alpha02'
//
//    // API (LICENSE done)
//    implementation 'com.google.code.gson:gson:2.9.0'
//
//    // UI Graphics (LICENSE done)
////    implementation 'com.github.bumptech.glide:glide:4.13.2'
//
//    // API (LICENSE done)
//    implementation 'androidx.recyclerview:recyclerview-selection:1.2.0-alpha01'
//
//    // API (LICENSE done)
////    implementation 'androidx.appcompat:appcompat:1.6.0-alpha05'
//
//    // API (LICENSE done)
//    implementation 'androidx.constraintlayout:constraintlayout:2.2.0-alpha03'
//
//    // API (LICENSE done)
//    api 'com.google.guava:guava:31.1-android'
//
//    annotationProcessor 'androidx.room:room-compiler:2.5.0-alpha02'


    implementation project(path: ':lite')
}
